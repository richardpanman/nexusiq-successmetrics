import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.sonatype.gradle.plugins.scan' version '1.2.0'
    id "base"
    id "jacoco"
}

repositories {
    mavenCentral()
}

subprojects{
    apply plugin: 'java'
    apply plugin: 'jacoco'
    repositories {
        mavenCentral()
    }

    nexusIQScan {
        username = 'admin'
        password = 'admin123'
        serverUrl = 'http://localhost:8070'
        applicationId = 'successmetrics'
        stage = 'build'
        allConfigurations = true
    }
}

def applicationname = "nexusiq-successmetrics-${version}"
def releasedir = "${applicationname}/${applicationname}"
def viewMetricsDir = "${releasedir}/view-metrics"

task packageJar (type: Copy) {
  dependsOn ['view-metrics:bootJar']

  from('view-metrics/build/libs') {
  	include "view-metrics-${version}.jar"
  }
  from('view-metrics/releasefiles') {
    include '**'
  }
  into "${viewMetricsDir}"
  filter(ReplaceTokens, tokens: [APPVER: project.version])
}

task packageViewMetricsConfig (type: Copy) {
  from('view-metrics/src/main/resources'){
    include "application.properties"
  }
  into "${viewMetricsDir}/config"
}

task release (type: Zip) {
  dependsOn ':packageJar', ':packageViewMetricsConfig'
	from "${applicationname}"
	archiveName "${applicationname}.zip"
	destinationDir(file(projectDir))
}

clean.doFirst {
	delete "${applicationname}"
	delete "${applicationname}.zip"
}

build.doFirst {
	mkdir "${applicationname}"
}

release.dependsOn packageJar

// TODO https://docs.gradle.org/6.4-rc-1/samples/sample_jvm_multi_project_with_code_coverage.html

task codeCoverageReport (type: JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
    }
}
